#!/usr/bin/env python
# -*- coding:utf-8 -*-
###################################################################################
#
#   Copyright 2015-2016 University Of Science and Technology of China (USTC)
#   Licensed under the Apache License, Version 2.0 (the "License"); you may 
#   not use this file except in compliance with the License. You may obtain 
#   a copy of the License at
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   @filename:  recvMessage.py
#   @brief:     receiving the message from a daemon in EC2 instance by RabbitMQ
#   @version:   1.0
#   @author:    Yongyi Ran (yyran@ustc.edu.cn)
#   @date:      2015-04-20
#
###################################################################################


import pika, sys
import threading
import time
import logging

from DynamicEC2.common.Task import *
from DynamicEC2.common.Message import *
from DynamicEC2.common.Config import *

try:
                import cPickle as pickle
except:
                import pickle

#if not "/home/yyran/" in sys.path:
#        sys.path.append("/home/yyran/")
#
from DynamicEC2.common.Config import *

class RecvMessage(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
    
    def run(self):
        logging.info("Start the message recv server.....")
        mqserver = getValue('mq','rabbitMQServer')
        connection = pika.BlockingConnection(pika.ConnectionParameters(mqserver))
        channel = connection.channel()

        channel.exchange_declare(exchange='messages', type='direct')

        #routings = sys.argv[1:]
        #if not routings:
        routings = ['server']

        result = channel.queue_declare(exclusive=True)
        queue_name = result.method.queue

        for routing in routings:
            channel.queue_bind(exchange='messages',
                            queue=queue_name,
                            routing_key=routing)

        channel.basic_consume(self.callback, queue=queue_name, no_ack=False)
        logging.info(' [*] Waiting for messages. To exit press CTRL+C')
        channel.start_consuming()
        
    def callback(self, ch, method, properties, body):
        content = pickle.loads(body)
        recv_task = pickle.loads(content.arg)
        if content.type == 'Task_End':
            logging.info(" Task %d is fininshed" %(recv_task.id))
